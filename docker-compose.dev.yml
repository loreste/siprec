version: '3.8'

services:
  # SIPREC server in development mode
  siprec-dev:
    build:
      context: .
      dockerfile: Dockerfile.new
      target: development
    container_name: siprec-dev
    ports:
      - "8080:8080"     # HTTP API
      - "5060:5060/udp" # SIP UDP
      - "5060:5060/tcp" # SIP TCP
      - "2345:2345"     # Debug port
    volumes:
      - .:/workspace
      - ./recordings:/workspace/recordings
      - ./sessions:/workspace/sessions
      - ./logs:/workspace/logs
    environment:
      - GO_ENV=development
      - LOG_LEVEL=debug
      - HTTP_PORT=8080
      - SIP_PORT=5060
      - AMQP_URL=amqp://guest:guest@rabbitmq:5672/
      - AMQP_QUEUE_NAME=siprec_transcriptions
      - GOOGLE_APPLICATION_CREDENTIALS=/workspace/certs/google-credentials.json
      - AWS_REGION=us-east-1
      - AZURE_SPEECH_REGION=eastus
    depends_on:
      - rabbitmq
      - redis
    networks:
      - siprec-network
    restart: unless-stopped

  # Production-like SIPREC server
  siprec-prod:
    build:
      context: .
      dockerfile: Dockerfile.new
      target: production
    container_name: siprec-prod
    ports:
      - "8081:8080"     # HTTP API (different port to avoid conflict)
      - "5061:5060/udp" # SIP UDP
      - "5061:5060/tcp" # SIP TCP
    volumes:
      - ./recordings:/app/recordings
      - ./sessions:/app/sessions
      - ./logs:/app/logs
      - ./certs:/app/certs:ro
    environment:
      - GO_ENV=production
      - LOG_LEVEL=info
      - HTTP_PORT=8080
      - SIP_PORT=5060
      - AMQP_URL=amqp://guest:guest@rabbitmq:5672/
      - AMQP_QUEUE_NAME=siprec_transcriptions
    depends_on:
      - rabbitmq
      - redis
    networks:
      - siprec-network
    restart: unless-stopped
    profiles:
      - production

  # Test runner
  siprec-test:
    build:
      context: .
      dockerfile: Dockerfile.new
      target: tester
    container_name: siprec-test
    volumes:
      - ./test-results:/build/test-results
    environment:
      - GO_ENV=test
      - TEST_AMQP_URL=amqp://guest:guest@rabbitmq:5672/
      - TEST_REDIS_URL=redis://redis:6379
    depends_on:
      - rabbitmq
      - redis
    networks:
      - siprec-network
    profiles:
      - test

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: siprec-rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./scripts/rabbitmq-init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    networks:
      - siprec-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and session state
  redis:
    image: redis:7-alpine
    container_name: siprec-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./scripts/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - siprec-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL for persistent storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: siprec-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=siprec
      - POSTGRES_USER=siprec
      - POSTGRES_PASSWORD=siprec_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - siprec-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U siprec -d siprec"]
      interval: 30s
      timeout: 10s
      retries: 5
    profiles:
      - postgres

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: siprec-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./scripts/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - siprec-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: siprec-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./scripts/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - siprec-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Load balancer (for multi-instance testing)
  nginx:
    image: nginx:alpine
    container_name: siprec-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./scripts/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - siprec-dev
    networks:
      - siprec-network
    restart: unless-stopped
    profiles:
      - loadbalancer

volumes:
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  siprec-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16