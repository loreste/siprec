#
# HAProxy configuration for SIPREC Server High Availability
# Provides load balancing for SIP UDP/TCP, HTTP API, and health checks
#

global
    # Process management
    daemon
    user haproxy
    group haproxy
    
    # Performance tuning
    maxconn 40000
    nbproc 1
    nbthread 4
    
    # Logging
    log stdout local0 info
    
    # SSL configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Stats socket for management
    stats socket /var/run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    
    # Tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768

defaults
    mode http
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout queue 5s
    timeout tarpit 60s
    timeout tunnel 1h
    
    # Options
    option httplog
    option dontlognull
    option log-health-checks
    option redispatch
    retries 3
    
    # Error pages
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

#
# Frontend definitions
#

# HTTP API and Web Interface Frontend
frontend siprec_http_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/siprec.pem
    mode http
    
    # Redirect HTTP to HTTPS
    redirect scheme https if !{ ssl_fc }
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # Health check endpoint
    acl health_check path_beg /health
    use_backend siprec_health_backend if health_check
    
    # API endpoints
    acl api_request path_beg /api
    use_backend siprec_api_backend if api_request
    
    # WebSocket endpoints
    acl websocket_request path_beg /ws
    use_backend siprec_websocket_backend if websocket_request
    
    # Metrics endpoint
    acl metrics_request path_beg /metrics
    use_backend siprec_metrics_backend if metrics_request
    
    # Default backend for web interface
    default_backend siprec_web_backend

# SIP UDP Frontend (for SIP signaling)
frontend siprec_sip_udp_frontend
    bind *:5060
    bind *:5061
    mode tcp
    
    # Enable proxy protocol if needed
    # option accept-proxy
    
    default_backend siprec_sip_udp_backend

# SIP TCP Frontend (for SIP signaling)
frontend siprec_sip_tcp_frontend
    bind *:5060
    bind *:5061
    mode tcp
    
    # TCP specific options
    option tcplog
    option tcp-check
    
    default_backend siprec_sip_tcp_backend

# SIP TLS Frontend (for secure SIP signaling)
frontend siprec_sip_tls_frontend
    bind *:5065 ssl crt /etc/ssl/certs/siprec.pem
    mode tcp
    
    option tcplog
    option tcp-check
    
    default_backend siprec_sip_tls_backend

# HAProxy Stats Frontend
frontend haproxy_stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:haproxy-stats-password

#
# Backend definitions
#

# SIPREC API Backend
backend siprec_api_backend
    mode http
    balance roundrobin
    
    # Health check
    option httpchk GET /health
    http-check expect status 200
    
    # Session persistence (optional)
    # cookie SERVERID insert indirect nocache
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # SIPREC server instances
    server siprec1 192.168.1.10:8080 check inter 5s fall 3 rise 2 weight 100
    server siprec2 192.168.1.11:8080 check inter 5s fall 3 rise 2 weight 100
    server siprec3 192.168.1.12:8080 check inter 5s fall 3 rise 2 weight 100

# SIPREC WebSocket Backend
backend siprec_websocket_backend
    mode http
    balance source
    
    # WebSocket specific configuration
    option http-server-close
    option forceclose
    
    # Health check
    option httpchk GET /health
    http-check expect status 200
    
    # WebSocket upgrade handling
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    
    # SIPREC server instances
    server siprec1 192.168.1.10:8080 check inter 5s fall 3 rise 2 weight 100
    server siprec2 192.168.1.11:8080 check inter 5s fall 3 rise 2 weight 100
    server siprec3 192.168.1.12:8080 check inter 5s fall 3 rise 2 weight 100

# SIPREC Health Check Backend
backend siprec_health_backend
    mode http
    balance roundrobin
    
    option httpchk GET /health
    http-check expect status 200
    
    # SIPREC server instances
    server siprec1 192.168.1.10:8080 check inter 5s fall 3 rise 2 weight 100
    server siprec2 192.168.1.11:8080 check inter 5s fall 3 rise 2 weight 100
    server siprec3 192.168.1.12:8080 check inter 5s fall 3 rise 2 weight 100

# SIPREC Metrics Backend
backend siprec_metrics_backend
    mode http
    balance roundrobin
    
    option httpchk GET /health
    http-check expect status 200
    
    # SIPREC server instances
    server siprec1 192.168.1.10:8080 check inter 5s fall 3 rise 2 weight 100
    server siprec2 192.168.1.11:8080 check inter 5s fall 3 rise 2 weight 100
    server siprec3 192.168.1.12:8080 check inter 5s fall 3 rise 2 weight 100

# SIPREC Web Interface Backend
backend siprec_web_backend
    mode http
    balance roundrobin
    
    option httpchk GET /health
    http-check expect status 200
    
    # SIPREC server instances
    server siprec1 192.168.1.10:8080 check inter 5s fall 3 rise 2 weight 100
    server siprec2 192.168.1.11:8080 check inter 5s fall 3 rise 2 weight 100
    server siprec3 192.168.1.12:8080 check inter 5s fall 3 rise 2 weight 100

# SIP UDP Backend
backend siprec_sip_udp_backend
    mode tcp
    balance leastconn
    
    # Health check for UDP (custom script required)
    option external-check
    external-check command "/usr/local/bin/check_sip_udp.sh"
    
    # SIPREC server instances
    server siprec1 192.168.1.10:5060 check inter 10s fall 3 rise 2 weight 100
    server siprec2 192.168.1.11:5060 check inter 10s fall 3 rise 2 weight 100
    server siprec3 192.168.1.12:5060 check inter 10s fall 3 rise 2 weight 100

# SIP TCP Backend
backend siprec_sip_tcp_backend
    mode tcp
    balance leastconn
    
    # TCP health check
    option tcp-check
    tcp-check send "OPTIONS sip:healthcheck@localhost SIP/2.0\r\nVia: SIP/2.0/TCP localhost:5060;branch=z9hG4bK-healthcheck\r\nFrom: <sip:healthcheck@localhost>;tag=healthcheck\r\nTo: <sip:healthcheck@localhost>\r\nCall-ID: healthcheck\r\nCSeq: 1 OPTIONS\r\nMax-Forwards: 70\r\nContent-Length: 0\r\n\r\n"
    tcp-check expect string "SIP/2.0 200"
    
    # SIPREC server instances
    server siprec1 192.168.1.10:5060 check inter 10s fall 3 rise 2 weight 100
    server siprec2 192.168.1.11:5060 check inter 10s fall 3 rise 2 weight 100
    server siprec3 192.168.1.12:5060 check inter 10s fall 3 rise 2 weight 100

# SIP TLS Backend
backend siprec_sip_tls_backend
    mode tcp
    balance leastconn
    
    # TLS health check
    option tcp-check
    option ssl-hello-chk
    
    # SIPREC server instances
    server siprec1 192.168.1.10:5065 check inter 10s fall 3 rise 2 weight 100 ssl verify none
    server siprec2 192.168.1.11:5065 check inter 10s fall 3 rise 2 weight 100 ssl verify none
    server siprec3 192.168.1.12:5065 check inter 10s fall 3 rise 2 weight 100 ssl verify none

#
# Listen sections for specific use cases
#

# Redis cluster proxy (if needed)
listen redis_cluster
    bind *:6379
    mode tcp
    balance first
    
    # Redis health check
    option tcp-check
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    
    # Redis instances
    server redis1 192.168.1.20:6379 check inter 5s fall 3 rise 2
    server redis2 192.168.1.21:6379 check inter 5s fall 3 rise 2 backup
    server redis3 192.168.1.22:6379 check inter 5s fall 3 rise 2 backup

# MySQL cluster proxy (if needed)
listen mysql_cluster
    bind *:3306
    mode tcp
    balance leastconn
    
    # MySQL health check
    option mysql-check user haproxy_check
    
    # MySQL instances
    server mysql1 192.168.1.30:3306 check inter 5s fall 3 rise 2
    server mysql2 192.168.1.31:3306 check inter 5s fall 3 rise 2 backup