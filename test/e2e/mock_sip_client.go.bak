package e2e

import (
	"fmt"
	"math/rand"
	"net"
	"time"

	"github.com/emiago/sipgo"
	siplib "github.com/emiago/sipgo/sip"
	"github.com/google/uuid"
	"github.com/pion/sdp/v3"
	"github.com/sirupsen/logrus"
)

// MockSIPClient simulates a SIP client for testing
type MockSIPClient struct {
	UA            *sipgo.UserAgent
	Logger        *logrus.Logger
	ServerAddr    string
	LocalAddr     string
	FromUser      string
	ToUser        string
	CallID        string
	InviteDialogs map[string]*siplib.Dialog
}

// NewMockSIPClient creates a new mock SIP client
func NewMockSIPClient(logger *logrus.Logger, serverAddr, localAddr string) (*MockSIPClient, error) {
	ua, err := sipgo.NewUA()
	if err != nil {
		return nil, fmt.Errorf("failed to create SIP user agent: %w", err)
	}
	
	return &MockSIPClient{
		UA:            ua,
		Logger:        logger,
		ServerAddr:    serverAddr,
		LocalAddr:     localAddr,
		FromUser:      "sip:testcaller@example.com",
		ToUser:        "sip:testcallee@example.com",
		CallID:        uuid.New().String(),
		InviteDialogs: make(map[string]*siplib.Dialog),
	}, nil
}

// SendINVITE sends a test INVITE with SIPREC metadata
func (c *MockSIPClient) SendINVITE() (*siplib.Response, error) {
	// Create request URI
	requestURI, err := siplib.ParseURI(c.ServerAddr)
	if err != nil {
		return nil, fmt.Errorf("failed to parse server URI: %w", err)
	}
	
	// Create FROM header
	fromHeader, err := siplib.ParseURI(c.FromUser)
	if err != nil {
		return nil, fmt.Errorf("failed to parse from URI: %w", err)
	}
	
	// Create TO header
	toHeader, err := siplib.ParseURI(c.ToUser)
	if err != nil {
		return nil, fmt.Errorf("failed to parse to URI: %w", err)
	}
	
	// Create SDP with test media
	callSessionID := rand.Int63()
	sdpValue := createTestSDP(callSessionID, "127.0.0.1")
	
	// SIPREC metadata
	siprecMetadata := createTestSiprecMetadata()
	
	// Create multipart MIME body
	boundary := fmt.Sprintf("boundary_%s", uuid.New().String())
	contentType := fmt.Sprintf("multipart/mixed;boundary=%s", boundary)
	
	multipartBody := fmt.Sprintf(`--%s
Content-Type: application/sdp
Content-Disposition: session;handling=required

%s

--%s
Content-Type: application/rs-metadata+xml
Content-Disposition: recording-session

%s
--%s--
`, boundary, sdpValue, boundary, siprecMetadata, boundary)
	
	// Create INVITE request
	inviteReq := siplib.NewRequest(
		"INVITE",
		requestURI,
		"SIP/2.0",
		[]siplib.Header{
			&siplib.FromHeader{Address: &siplib.Address{URI: fromHeader, DisplayName: "Test Caller"}, Params: siplib.HeaderParams{"tag": siplib.String{Str: uuid.New().String()}}},
			&siplib.ToHeader{Address: &siplib.Address{URI: toHeader, DisplayName: "Test Callee"}},
			&siplib.ContactHeader{Address: &siplib.Address{URI: &siplib.URI{User: "testcaller", Host: "127.0.0.1"}}},
			siplib.NewHeader("Content-Type", contentType),
		},
		[]byte(multipartBody),
	)
	
	// Add Call-ID
	inviteReq.SetCallID(&siplib.CallID{Value: c.CallID})
	
	// Create a custom transaction
	inviteTx, err := c.UA.TransactionRequest(inviteReq)
	if err != nil {
		return nil, fmt.Errorf("failed to create INVITE transaction: %w", err)
	}
	
	// Send request and wait for final response
	resp, err := inviteTx.Execute()
	if err != nil {
		return nil, fmt.Errorf("failed to execute INVITE transaction: %w", err)
	}
	
	// Create a dialog for this transaction
	dialog, err := siplib.NewDialog(inviteReq, resp)
	if err != nil {
		return nil, fmt.Errorf("failed to create dialog: %w", err)
	}
	
	// Store dialog for later use
	c.InviteDialogs[c.CallID] = dialog
	
	c.Logger.WithFields(logrus.Fields{
		"call_id": c.CallID,
		"status":  resp.StatusCode(),
	}).Info("INVITE response received")
	
	return resp, nil
}

// SendBYE sends a BYE request to terminate a call
func (c *MockSIPClient) SendBYE(callID string) (*siplib.Response, error) {
	// Get dialog for call
	dialog, ok := c.InviteDialogs[callID]
	if !ok {
		return nil, fmt.Errorf("no dialog found for call ID: %s", callID)
	}
	
	// Create BYE request
	byeReq, err := dialog.CreateRequest("BYE", nil)
	if err != nil {
		return nil, fmt.Errorf("failed to create BYE request: %w", err)
	}
	
	// Send BYE
	byeTx, err := c.UA.TransactionRequest(byeReq)
	if err != nil {
		return nil, fmt.Errorf("failed to create BYE transaction: %w", err)
	}
	
	// Wait for response
	resp, err := byeTx.Execute()
	if err != nil {
		return nil, fmt.Errorf("failed to execute BYE transaction: %w", err)
	}
	
	c.Logger.WithFields(logrus.Fields{
		"call_id": callID,
		"status":  resp.StatusCode(),
	}).Info("BYE response received")
	
	// Delete dialog
	delete(c.InviteDialogs, callID)
	
	return resp, nil
}

// SendTestRTP simulates sending RTP packets for testing
func (c *MockSIPClient) SendTestRTP(serverIP string, port int, duration time.Duration) error {
	// Create UDP connection
	conn, err := net.DialUDP("udp", nil, &net.UDPAddr{IP: net.ParseIP(serverIP), Port: port})
	if err != nil {
		return fmt.Errorf("failed to dial UDP: %w", err)
	}
	defer conn.Close()
	
	// Generate test RTP packets
	// This is a simplified RTP packet format for testing
	// In a real scenario, you'd use a proper RTP library
	
	// RTP header:
	// 0                   1                   2                   3
	// 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
	// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	// |V=2|P|X|  CC   |M|     PT      |       sequence number         |
	// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	// |                           timestamp                           |
	// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
	// |           synchronization source (SSRC) identifier            |
	// +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
	
	// Create a basic RTP packet
	header := make([]byte, 12)
	header[0] = 0x80 // Version 2, no padding, no extension, 0 CSRC
	header[1] = 0    // PCMU payload type
	
	// Payload with 160 bytes of "audio" (just random data for testing)
	payload := make([]byte, 160)
	_, err = rand.Read(payload)
	if err != nil {
		return fmt.Errorf("failed to generate random audio data: %w", err)
	}
	
	packet := make([]byte, len(header)+len(payload))
	copy(packet, header)
	copy(packet[len(header):], payload)
	
	// Send packets for the specified duration
	startTime := time.Now()
	sequence := uint16(0)
	timestamp := uint32(0)
	ssrc := rand.Uint32()
	
	// Set SSRC in header
	header[8] = byte(ssrc >> 24)
	header[9] = byte(ssrc >> 16)
	header[10] = byte(ssrc >> 8)
	header[11] = byte(ssrc)
	
	ticker := time.NewTicker(20 * time.Millisecond) // 50 packets per second (standard for PCMU)
	defer ticker.Stop()
	
	for time.Since(startTime) < duration {
		select {
		case <-ticker.C:
			// Update sequence number
			header[2] = byte(sequence >> 8)
			header[3] = byte(sequence)
			sequence++
			
			// Update timestamp (8kHz * 20ms = 160 samples)
			timestamp += 160
			header[4] = byte(timestamp >> 24)
			header[5] = byte(timestamp >> 16)
			header[6] = byte(timestamp >> 8)
			header[7] = byte(timestamp)
			
			// Copy updated header to packet
			copy(packet, header)
			
			// Send packet
			if _, err := conn.Write(packet); err != nil {
				return fmt.Errorf("failed to send RTP packet: %w", err)
			}
		}
	}
	
	c.Logger.WithFields(logrus.Fields{
		"server_ip": serverIP,
		"port":      port,
		"duration":  duration.String(),
		"packets":   sequence,
	}).Info("Finished sending test RTP packets")
	
	return nil
}

// createTestSDP creates a test SDP for RTP audio
func createTestSDP(sessionID int64, ip string) string {
	sdpObj := sdp.SessionDescription{
		Version: 0,
		Origin: sdp.Origin{
			Username:       "-",
			SessionID:      uint64(sessionID),
			SessionVersion: 1,
			NetworkType:    "IN",
			AddressType:    "IP4",
			UnicastAddress: ip,
		},
		SessionName: "Test Session",
		ConnectionInformation: &sdp.ConnectionInformation{
			NetworkType: "IN",
			AddressType: "IP4",
			Address:     &sdp.Address{Address: ip},
		},
		TimeDescriptions: []sdp.TimeDescription{
			{
				Timing: sdp.Timing{
					StartTime: 0,
					StopTime:  0,
				},
			},
		},
		MediaDescriptions: []*sdp.MediaDescription{
			{
				MediaName: sdp.MediaName{
					Media:   "audio",
					Port:    sdp.RangedPort{Value: 49170},
					Protos:  []string{"RTP", "AVP"},
					Formats: []string{"0"}, // PCMU
				},
				Attributes: []sdp.Attribute{
					{Key: "rtpmap", Value: "0 PCMU/8000"},
				},
			},
		},
	}
	
	sdpBytes, _ := sdpObj.Marshal()
	return string(sdpBytes)
}

// createTestSiprecMetadata creates a test SIPREC metadata XML for testing
func createTestSiprecMetadata() string {
	sessionID := uuid.New().String()
	return fmt.Sprintf(`<?xml version="1.0" encoding="UTF-8"?>
<recording xmlns="urn:ietf:params:xml:ns:recording:1" session="%s" state="recording">
  <participant id="participant1">
    <name>Test Caller</name>
    <aor>sip:testcaller@example.com</aor>
  </participant>
  <participant id="participant2">
    <name>Test Callee</name>
    <aor>sip:testcallee@example.com</aor>
  </participant>
  <stream label="stream1" streamid="stream1audio"></stream>
  <sessionrecordingassoc sessionid=""></sessionrecordingassoc>
</recording>`, sessionID)
}