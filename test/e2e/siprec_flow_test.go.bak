package e2e

import (
	"context"
	"strconv"
	"sync"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

// TestSiprecCallFlow tests a complete SIPREC call flow from end to end
func TestSiprecCallFlow(t *testing.T) {
	// Initialize test environment
	testEnv := NewTestEnvironment(t)
	defer testEnv.Cleanup()
	
	// Create a context with timeout for the whole test
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	
	// Start the SIP server
	var wg sync.WaitGroup
	wg.Add(1)
	
	serverPort := testEnv.Config.Ports[0]
	serverIP := testEnv.Config.InternalIP
	
	// Start server in another goroutine
	go func() {
		defer wg.Done()
		
		for _, port := range testEnv.Config.Ports {
			addr := serverIP + ":" + strconv.Itoa(port)
			testEnv.Logger.WithField("address", addr).Info("Starting SIP server on UDP for test")
			
			err := testEnv.SIPHandler.Server.ListenAndServe(ctx, "udp", addr)
			if err != nil {
				testEnv.Logger.WithError(err).WithField("port", port).Error("Failed to start SIP server on UDP")
				testEnv.Errors <- err
				return
			}
		}
		
		<-ctx.Done()
	}()
	
	// Give the server a moment to start
	time.Sleep(1 * time.Second)
	
	// Create a mock SIP client
	mockClient, err := NewMockSIPClient(testEnv.Logger, "sip:"+serverIP+":"+strconv.Itoa(serverPort), "sip:127.0.0.1:0")
	if err != nil {
		t.Fatalf("Failed to create mock SIP client: %v", err)
	}
	
	// Step 1: Send INVITE with SIPREC metadata
	testEnv.Logger.Info("Step 1: Sending INVITE with SIPREC metadata")
	inviteResp, err := mockClient.SendINVITE()
	if err != nil {
		t.Fatalf("Failed to send INVITE: %v", err)
	}
	
	// Check INVITE response
	assert.Equal(t, 200, inviteResp.StatusCode(), "Expected 200 OK response to INVITE")
	assert.NotEmpty(t, inviteResp.Body(), "Expected SDP body in INVITE response")
	
	// Step 2: Extract RTP port from SDP response and send test RTP data
	// In a real test, we would parse the SDP to get the port
	// For simplicity, we'll use a fixed port from our configuration
	rtpPort := testEnv.Config.RTPPortMin
	
	testEnv.Logger.WithField("port", rtpPort).Info("Step 2: Sending test RTP data")
	// Send RTP packets for 5 seconds
	go func() {
		err := mockClient.SendTestRTP(serverIP, rtpPort, 5*time.Second)
		if err != nil {
			testEnv.Logger.WithError(err).Error("Failed to send test RTP")
			testEnv.Errors <- err
		}
	}()
	
	// Step 3: Wait for transcriptions
	testEnv.Logger.Info("Step 3: Waiting for transcriptions")
	
	// Wait for at least 2 transcriptions
	transcriptions := []string{}
	transcriptionTimeout := time.After(10 * time.Second)
	
	for len(transcriptions) < 2 {
		select {
		case transcription := <-testEnv.ReceivedTranscriptions:
			transcriptions = append(transcriptions, transcription)
			testEnv.Logger.WithField("transcription", transcription).Info("Received transcription")
			
		case err := <-testEnv.Errors:
			t.Fatalf("Error during test: %v", err)
			
		case <-transcriptionTimeout:
			t.Fatalf("Timed out waiting for transcriptions")
			
		case <-ctx.Done():
			t.Fatalf("Test context cancelled: %v", ctx.Err())
		}
	}
	
	// Verify we got some transcriptions
	assert.GreaterOrEqual(t, len(transcriptions), 2, "Expected at least 2 transcriptions")
	
	// Step 4: Send BYE to terminate the call
	testEnv.Logger.Info("Step 4: Sending BYE to terminate call")
	byeResp, err := mockClient.SendBYE(mockClient.CallID)
	if err != nil {
		t.Fatalf("Failed to send BYE: %v", err)
	}
	
	// Check BYE response
	assert.Equal(t, 200, byeResp.StatusCode(), "Expected 200 OK response to BYE")
	
	// Step 5: Verify call was properly terminated
	// Wait a moment for cleanup
	time.Sleep(1 * time.Second)
	
	// Check that there are no active calls
	activeCallCount := testEnv.SIPHandler.GetActiveCallCount()
	assert.Equal(t, 0, activeCallCount, "Expected no active calls after BYE")
	
	// Wait for the server to shut down
	cancel()
	wg.Wait()
	
	testEnv.Logger.Info("Test completed successfully")
}